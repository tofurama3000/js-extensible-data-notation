var jsedn=function(e){var t={};function n(r){if(t[r])return t[r].exports;var s=t[r]={i:r,l:!1,exports:{}};return e[r].call(s.exports,s,s.exports,n),s.l=!0,s.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var s in e)n.d(r,s,function(t){return e[t]}.bind(null,s));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=25)}([function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(12)),r(n(46)),r(n(47)),r(n(13)),r(n(48)),r(n(49))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.toArrayOrEmpty=function(e){return Array.isArray(e)?e:[]}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);t.toIterableOrEmpty=function(e){return r.isIterable(e)?e:[]}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(7)),r(n(30)),r(n(31)),r(n(32)),r(n(9)),r(n(8)),r(n(10)),r(n(11)),r(n(33)),r(n(34)),r(n(35)),r(n(36)),r(n(37)),r(n(43)),r(n(44))},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(45)),r(n(50)),r(n(15)),r(n(51)),r(n(14)),r(n(52)),r(n(53)),r(n(54)),r(n(55)),r(n(56)),r(n(1)),r(n(57)),r(n(58)),r(n(59)),r(n(60)),r(n(17)),r(n(16)),r(n(61))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(3),s=n(4),o=n(6),i=n(0),a=function(){function e(e){this._keyword="",this.keyword=e}return Object.defineProperty(e.prototype,"keyword",{get:function(){return this._keyword},set:function(e){":"===e[0]&&(e=e.substr(1)),this._keyword=e},enumerable:!0,configurable:!0}),e}();t.EdnKeyword=a;var u=function(){return function(e){this.symbol=e}}();t.EdnSymbol=u;var c=function(){return function(e,t){this.data=t,r.isString(e)?this.tag=new u(e):this.tag=e}}();t.EdnTag=c;var l=function(){function e(e){this.data=new Map,this.data=new Map(i.pipe(e,s.chunk(2),s.map(function(e){var t=e[0],n=e[1];return[m(t),{key:t,value:n}]})))}return e.prototype.get=function(e){var t=m(e);return this.data.has(t)?this.data.get(t).value:null},e.prototype.has=function(e){return this.data.has(m(e))},e.prototype.set=function(e,t){this.data.set(m(e),{key:e,value:t})},e.prototype.keys=function(){return o.map(function(e){return e.key},this.data.values())},e.prototype.values=function(){return o.map(function(e){return e.value},this.data.values())},e.prototype.delete=function(e){return this.data.delete(m(e))},e.prototype.clear=function(){this.data.clear()},e.prototype[Symbol.iterator]=function(){return this.entries()},e.prototype.entries=function(){return o.map(function(e){return[e.key,e.value]},this.data.values())},e}(),f=function(){return function(e){var t=this;this.has=function(e){return t.data.has(e)},this.clear=function(){return t.data.clear()},this.delete=function(e){return t.data.delete(e)},this.entries=function(){return t.data.entries()},this.get=function(e){return t.data.get(e)},this.keys=function(){return t.data.keys()},this.set=function(e,n){return t.data.set(e,n)},this.values=function(){return t.data.values()},this[Symbol.iterator]=function(){return t.data[Symbol.iterator]()},this.data=new l(e)}}();t.EdnMap=f;var p=function(){return function(e){var t=this;this.add=function(e){return t.data.set(e,e)},this.clear=function(){return t.data.clear()},this.has=function(e){return t.data.has(e)},this.delete=function(e){return t.data.delete(e)},this.entries=function(){return t.data.entries()},this.values=function(){return t.data.values()},this[Symbol.iterator]=function(){return t.data[Symbol.iterator]()},this.data=new l(i.pipe(e,s.map(function(e){return[e,e]}),s.flatten))}}();function m(e){return b(e)+"#"+function(e){if(r.isNil(e))return"null";return JSON.stringify(e)}(e)}function b(e){return r.isNil(e)?"Nil":r.isNumber(e)?"Number":r.isString(e)?"String":e instanceof c?"Tag":e instanceof u?"Symbol":e instanceof a?"Keyword":e instanceof p?"Set":r.isArray(e)?"Vector":r.isObject(e)||e instanceof f?"Map":"Other"}t.EdnSet=p,t.type=b,t.keyword=function(e){return new a(e)},t.symbol=function(e){return new u(e)},t.set=function(e){return new p(e)},t.map=function(e){return new f(e)},t.tag=function(e,t){return new c(e,t)},t.stringify=function(e){switch(b(e)){case"Nil":return"nil";case"Number":return""+e;case"String":return JSON.stringify(e);case"Map":return function(e){return"{"+i.pipe(e.entries(),o.flatten,o.map(t.stringify),o.collectToArray,s.join(" "))+"}"}(e);case"Set":return function(e){return"#{"+i.pipe(e.values(),o.map(t.stringify),o.collectToArray,s.join(" "))+"}"}(e);case"Tag":return function(e){return"#"+e.tag.symbol+" "+t.stringify(e.data)}(e);case"Symbol":return function(e){return e.symbol}(e);case"Keyword":return function(e){return":"+e.keyword}(e);case"Vector":return function(e){return"["+s.map(t.stringify,e).join(" ")+"]"}(e);default:return""+e}}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(18)),r(n(62)),r(n(63)),r(n(64)),r(n(19)),r(n(65)),r(n(66)),r(n(67)),r(n(68)),r(n(69)),r(n(70)),r(n(71)),r(n(20)),r(n(21)),r(n(72)),r(n(22)),r(n(73)),r(n(74)),r(n(75))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isFunction=e=>"function"==typeof e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isObject=e=>e===Object(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNull=e=>null===e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isUndefined=e=>void 0===e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isNumber=e=>"number"==typeof e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.curry=e=>{const t=n=>(...r)=>{const s=n.concat(r);return s.length<e.length?t(s):e(...s)};return t([])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reverseArgs=function(e){return(...t)=>e(...t.reverse())}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.map=r.curry((e,t)=>s.toArrayOrEmpty(t).map(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.flatten=r.curry(e=>[].concat(...s.toArrayOrEmpty(e)))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(17);t.firstOrNull=r.firstOr(null)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),s=n(0);t.firstOr=s.curry((e,t)=>{const n=r.toArrayOrEmpty(t);return n.length?n[0]:e})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(19),o=n(2);t.collectToArray=(e,n=1/0)=>r.isInfinite(n)?[...o.toIterableOrEmpty(e)]:t.collectToArray(s.limit(n,o.toIterableOrEmpty(e)))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.limit=r.curry(function*(e,t){const n=s.toIterableOrEmpty(t);let r=0;for(const t of n){if(!(r++<(0|e)))break;yield t}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(21);t.first=r.take(1)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),s=n(0);t.take=s.curry(function*(e,t){let n=0;const s=r.toIterableOrEmpty(t);for(const t of s){if(!(n++<e))return;yield t}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.firstOr=r.curry((e,t)=>{for(const e of t)return e;return e})},function(e,t,n){"use strict";function r(e){if(!e.length)return"\\";var t=e[0],n=e.substr(1);switch(t.toLowerCase()){case"n":return"\n"+n;case"r":return"\r"+n;case"t":return"\t"+n;case"\\":return"\\"+n;case"'":return"'"+n;case'"':return'"'+n;case"b":return"\b"+n;case"f":return"\f"+n;default:return e}}Object.defineProperty(t,"__esModule",{value:!0}),t.unescapeChar=r,t.unescapeStr=function(e){return e.split("\\").map(function(e,t){return t?r(e):e}).join("")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3),s=n(6);t.entries=e=>{if(e instanceof Map)return s.collectToArray(e.entries());if(e instanceof Set)return s.collectToArray(e.entries());if(r.isObject(e)){if(r.isFunction(e.entries)){const t=e.entries();if(r.isIterable(t))return s.collectToArray(t)}return Object.entries(e)}return r.isArray(e)?e.map((e,t)=>[t,e]):[]}},function(e,t,n){"use strict";var r=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t};Object.defineProperty(t,"__esModule",{value:!0});var s=n(26),o=n(29),i=n(76),a=n(79),u=r(n(5));t.Edn={parse:function(e){return o.processTokens(s.parse(e))},parseJson:function(e){return a.processTokens(s.parse(e))},stringify:i.stringify,types:u}},function(e,t,n){"use strict";function r(e){return e[0]}Object.defineProperty(t,"__esModule",{value:!0});var s={Lexer:void 0,ParserRules:[{name:"Main",symbols:["EDN"],postprocess:function(e){return e[0]}},{name:"EDN",symbols:["Exp"],postprocess:function(e){return e[0]}},{name:"Exp$subexpression$1",symbols:["ElementSpace"]},{name:"Exp$subexpression$1",symbols:["ElementNoSpace"]},{name:"Exp",symbols:["Exp$subexpression$1"],postprocess:function(e){return[].concat.apply([],e[0])}},{name:"_Exp",symbols:["__exp"]},{name:"_Exp",symbols:["__char"],postprocess:function(e){return e[0]}},{name:"__exp",symbols:["_","Exp"],postprocess:function(e){return e[1]}},{name:"__char$ebnf$1$subexpression$1",symbols:["_Exp"]},{name:"__char$ebnf$1$subexpression$1",symbols:["ElementNoSpace"]},{name:"__char$ebnf$1",symbols:["__char$ebnf$1$subexpression$1"],postprocess:r},{name:"__char$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"__char",symbols:["Character","__char$ebnf$1"],postprocess:function(e){return[].concat.apply([],[e[0]].concat(e[1]?[].concat.apply([],e[1]):[]))}},{name:"ElementSpace$subexpression$1",symbols:["Number"]},{name:"ElementSpace$subexpression$1",symbols:["Character"]},{name:"ElementSpace$subexpression$1",symbols:["Reserved"]},{name:"ElementSpace$subexpression$1",symbols:["Symbol"]},{name:"ElementSpace$subexpression$1",symbols:["Keyword"]},{name:"ElementSpace$subexpression$1",symbols:["Tag"]},{name:"ElementSpace$subexpression$1",symbols:["Discard"]},{name:"ElementSpace$ebnf$1$subexpression$1",symbols:["_Exp"]},{name:"ElementSpace$ebnf$1$subexpression$1",symbols:["ElementNoSpace"]},{name:"ElementSpace$ebnf$1",symbols:["ElementSpace$ebnf$1$subexpression$1"],postprocess:r},{name:"ElementSpace$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"ElementSpace",symbols:["ElementSpace$subexpression$1","ElementSpace$ebnf$1"],postprocess:function(e){return[].concat.apply([],[e[0][0]].concat(e[1]?[].concat.apply([],e[1]):[]))}},{name:"ElementNoSpace$ebnf$1$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"ElementNoSpace$ebnf$1$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"ElementNoSpace$ebnf$1$subexpression$1",symbols:["ElementNoSpace$ebnf$1$subexpression$1$ebnf$1","Exp"]},{name:"ElementNoSpace$ebnf$1",symbols:["ElementNoSpace$ebnf$1$subexpression$1"],postprocess:r},{name:"ElementNoSpace$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"ElementNoSpace",symbols:["mapElementNoSpace","ElementNoSpace$ebnf$1"],postprocess:function(e){return[e[0]].concat(e[1]?e[1][1]:[])}},{name:"Element$subexpression$1",symbols:["Number"]},{name:"Element$subexpression$1",symbols:["Character"]},{name:"Element$subexpression$1",symbols:["Reserved"]},{name:"Element$subexpression$1",symbols:["Symbol"]},{name:"Element$subexpression$1",symbols:["Keyword"]},{name:"Element$subexpression$1",symbols:["Vector"]},{name:"Element$subexpression$1",symbols:["List"]},{name:"Element$subexpression$1",symbols:["String"]},{name:"Element$subexpression$1",symbols:["Map"]},{name:"Element$subexpression$1",symbols:["Set"]},{name:"Element",symbols:["Element$subexpression$1"],postprocess:function(e){return e[0][0]}},{name:"Vector$ebnf$1",symbols:["_"],postprocess:r},{name:"Vector$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Vector$ebnf$2$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"Vector$ebnf$2$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Vector$ebnf$2$subexpression$1",symbols:["Exp","Vector$ebnf$2$subexpression$1$ebnf$1"]},{name:"Vector$ebnf$2",symbols:["Vector$ebnf$2$subexpression$1"],postprocess:r},{name:"Vector$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"Vector",symbols:[{literal:"["},"Vector$ebnf$1","Vector$ebnf$2",{literal:"]"}],postprocess:function(e){return{type:"vector",data:e[2]?e[2][0]:[]}}},{name:"List$ebnf$1",symbols:["_"],postprocess:r},{name:"List$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"List$ebnf$2$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"List$ebnf$2$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"List$ebnf$2$subexpression$1",symbols:["Exp","List$ebnf$2$subexpression$1$ebnf$1"]},{name:"List$ebnf$2",symbols:["List$ebnf$2$subexpression$1"],postprocess:r},{name:"List$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"List",symbols:[{literal:"("},"List$ebnf$1","List$ebnf$2",{literal:")"}],postprocess:function(e){return{type:"list",data:e[2]?e[2][0]:[]}}},{name:"Map$ebnf$1",symbols:["_"],postprocess:r},{name:"Map$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Map$ebnf$2$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"Map$ebnf$2$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Map$ebnf$2$subexpression$1",symbols:["MapElem","Map$ebnf$2$subexpression$1$ebnf$1"]},{name:"Map$ebnf$2",symbols:["Map$ebnf$2$subexpression$1"],postprocess:r},{name:"Map$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"Map",symbols:[{literal:"{"},"Map$ebnf$1","Map$ebnf$2",{literal:"}"}],postprocess:function(e){return{type:"map",data:e[2]?e[2][0]:[]}}},{name:"Set$string$1",symbols:[{literal:"#"},{literal:"{"}],postprocess:function(e){return e.join("")}},{name:"Set$ebnf$1",symbols:["_"],postprocess:r},{name:"Set$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Set$ebnf$2$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"Set$ebnf$2$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Set$ebnf$2$subexpression$1",symbols:["Exp","Set$ebnf$2$subexpression$1$ebnf$1"]},{name:"Set$ebnf$2",symbols:["Set$ebnf$2$subexpression$1"],postprocess:r},{name:"Set$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"Set",symbols:["Set$string$1","Set$ebnf$1","Set$ebnf$2",{literal:"}"}],postprocess:function(e){return{type:"set",data:e[2]?e[2][0]:[]}}},{name:"Tag",symbols:[{literal:"#"},"Symbol","_","Element"],postprocess:function(e,t,n){return"_"===e[1].data[0]?n:{type:"tag",tag:e[1].data,data:e[3]}}},{name:"Discard$string$1",symbols:[{literal:"#"},{literal:"_"}],postprocess:function(e){return e.join("")}},{name:"Discard$ebnf$1",symbols:["_"],postprocess:r},{name:"Discard$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Discard",symbols:["Discard$string$1","Discard$ebnf$1","Element"],postprocess:function(){return{type:"discard"}}},{name:"String$ebnf$1",symbols:[]},{name:"String$ebnf$1",symbols:["String$ebnf$1","string_char"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"String",symbols:[{literal:'"'},"String$ebnf$1",{literal:'"'}],postprocess:function(e){return{type:"string",data:e[1].join("")}}},{name:"string_char",symbols:[/[^\\"]/]},{name:"string_char",symbols:["backslash"]},{name:"string_char",symbols:["backslash_unicode"],postprocess:r},{name:"backslash",symbols:[{literal:"\\"},/["trn\\]/],postprocess:function(e){return e.join("")}},{name:"backslash_unicode",symbols:[{literal:"\\"},"unicode"],postprocess:function(e){return e[1]}},{name:"Reserved$subexpression$1",symbols:["boolean"]},{name:"Reserved$subexpression$1",symbols:["nil"]},{name:"Reserved",symbols:["Reserved$subexpression$1"],postprocess:function(e){return e[0][0]}},{name:"boolean$subexpression$1",symbols:["true"]},{name:"boolean$subexpression$1",symbols:["false"]},{name:"boolean",symbols:["boolean$subexpression$1"],postprocess:function(e){return e[0][0]}},{name:"true$string$1",symbols:[{literal:"t"},{literal:"r"},{literal:"u"},{literal:"e"}],postprocess:function(e){return e.join("")}},{name:"true",symbols:["true$string$1"],postprocess:function(){return{type:"bool",data:!0}}},{name:"false$string$1",symbols:[{literal:"f"},{literal:"a"},{literal:"l"},{literal:"s"},{literal:"e"}],postprocess:function(e){return e.join("")}},{name:"false",symbols:["false$string$1"],postprocess:function(){return{type:"bool",data:!1}}},{name:"nil$string$1",symbols:[{literal:"n"},{literal:"i"},{literal:"l"}],postprocess:function(e){return e.join("")}},{name:"nil",symbols:["nil$string$1"],postprocess:function(){return{type:"nil",data:null}}},{name:"Symbol$subexpression$1",symbols:["symbol"]},{name:"Symbol$subexpression$1",symbols:[{literal:"/"}]},{name:"Symbol",symbols:["Symbol$subexpression$1"],postprocess:function(e,t,n){return"true"===e[0][0]||"false"===e[0][0]||"nil"===e[0][0]?n:{type:"symbol",data:e[0][0]}}},{name:"symbol$ebnf$1$subexpression$1",symbols:[{literal:"/"},"symbol_piece"]},{name:"symbol$ebnf$1",symbols:["symbol$ebnf$1$subexpression$1"],postprocess:r},{name:"symbol$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"symbol",symbols:["symbol_piece","symbol$ebnf$1"],postprocess:function(e){return e[0]+(e[1]?e[1].join(""):"")}},{name:"symbol_piece",symbols:["symbol_piece_basic"]},{name:"symbol_piece",symbols:["symbol_piece_num"],postprocess:r},{name:"symbol_piece_basic$ebnf$1",symbols:[]},{name:"symbol_piece_basic$ebnf$1",symbols:["symbol_piece_basic$ebnf$1","symbol_mid"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"symbol_piece_basic",symbols:["symbol_start","symbol_piece_basic$ebnf$1"],postprocess:function(e){return e[0]+e[1].join("")}},{name:"symbol_piece_num$ebnf$1$subexpression$1$ebnf$1",symbols:[]},{name:"symbol_piece_num$ebnf$1$subexpression$1$ebnf$1",symbols:["symbol_piece_num$ebnf$1$subexpression$1$ebnf$1","symbol_mid"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"symbol_piece_num$ebnf$1$subexpression$1",symbols:["symbol_second_special","symbol_piece_num$ebnf$1$subexpression$1$ebnf$1"]},{name:"symbol_piece_num$ebnf$1",symbols:["symbol_piece_num$ebnf$1$subexpression$1"],postprocess:r},{name:"symbol_piece_num$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"symbol_piece_num",symbols:[/[\-+.]/,"symbol_piece_num$ebnf$1"],postprocess:function(e){return e[0]+(e[1]?e[1][0]+e[1][1].join(""):"")}},{name:"symbol_basic$ebnf$1",symbols:[]},{name:"symbol_basic$ebnf$1",symbols:["symbol_basic$ebnf$1","symbol_mid"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"symbol_basic$ebnf$2$subexpression$1",symbols:[{literal:"/"},"symbol_piece"]},{name:"symbol_basic$ebnf$2",symbols:["symbol_basic$ebnf$2$subexpression$1"],postprocess:r},{name:"symbol_basic$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"symbol_basic",symbols:["symbol_start","symbol_basic$ebnf$1","symbol_basic$ebnf$2"],postprocess:function(e){return e[0]+e[1].join("")+(e[2]?e[2].join(""):"")}},{name:"symbol_start",symbols:["letter"]},{name:"symbol_start",symbols:[/[*~_!?$%&=<>]/],postprocess:function(e){return e[0]}},{name:"symbol_mid",symbols:["letter"]},{name:"symbol_mid",symbols:["digit"]},{name:"symbol_mid",symbols:[/[.*\!\-+_?$%&=<>:#]/],postprocess:function(e){return e[0]}},{name:"symbol_like_a_num$ebnf$1$subexpression$1$ebnf$1",symbols:[]},{name:"symbol_like_a_num$ebnf$1$subexpression$1$ebnf$1",symbols:["symbol_like_a_num$ebnf$1$subexpression$1$ebnf$1","symbol_mid"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"symbol_like_a_num$ebnf$1$subexpression$1",symbols:["symbol_second_special","symbol_like_a_num$ebnf$1$subexpression$1$ebnf$1"]},{name:"symbol_like_a_num$ebnf$1",symbols:["symbol_like_a_num$ebnf$1$subexpression$1"],postprocess:r},{name:"symbol_like_a_num$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"symbol_like_a_num$ebnf$2$subexpression$1",symbols:[{literal:"/"},"symbol_piece"]},{name:"symbol_like_a_num$ebnf$2",symbols:["symbol_like_a_num$ebnf$2$subexpression$1"],postprocess:r},{name:"symbol_like_a_num$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"symbol_like_a_num",symbols:[/[\-+.]/,"symbol_like_a_num$ebnf$1","symbol_like_a_num$ebnf$2"],postprocess:function(e){return e[0]+(e[1]?e[1][0]+e[1][1].join(""):"")+(e[2]?e[2].join(""):"")}},{name:"symbol_second_special",symbols:["symbol_start"]},{name:"symbol_second_special",symbols:[/[\-+.:#]/],postprocess:function(e){return e[0]}},{name:"Keyword",symbols:[{literal:":"},"Symbol"],postprocess:function(e){return{type:"keyword",data:":"+e[1].data}}},{name:"Character",symbols:[{literal:"\\"},"char"],postprocess:function(e){return{type:"char",data:e[1][0]}}},{name:"char",symbols:[/[^ \t\r\n]/]},{name:"char$string$1",symbols:[{literal:"n"},{literal:"e"},{literal:"w"},{literal:"l"},{literal:"i"},{literal:"n"},{literal:"e"}],postprocess:function(e){return e.join("")}},{name:"char",symbols:["char$string$1"]},{name:"char$string$2",symbols:[{literal:"r"},{literal:"e"},{literal:"t"},{literal:"u"},{literal:"r"},{literal:"n"}],postprocess:function(e){return e.join("")}},{name:"char",symbols:["char$string$2"]},{name:"char$string$3",symbols:[{literal:"s"},{literal:"p"},{literal:"a"},{literal:"c"},{literal:"e"}],postprocess:function(e){return e.join("")}},{name:"char",symbols:["char$string$3"]},{name:"char$string$4",symbols:[{literal:"t"},{literal:"a"},{literal:"b"}],postprocess:function(e){return e.join("")}},{name:"char",symbols:["char$string$4"]},{name:"char",symbols:["unicode"],postprocess:function(e){return e[0]}},{name:"Number",symbols:["Integer"]},{name:"Number",symbols:["Float"],postprocess:function(e){return e[0]}},{name:"Float",symbols:["float"],postprocess:function(e){return{type:"double",data:e[0][0],arbitrary:!!e[0][1]}}},{name:"Integer$ebnf$1",symbols:[{literal:"N"}],postprocess:r},{name:"Integer$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"Integer",symbols:["int","Integer$ebnf$1"],postprocess:function(e){return{type:"int",data:e[0][0],arbitrary:!!e[1]}}},{name:"float",symbols:["int",{literal:"M"}],postprocess:function(e){return[e.slice(0,1).join(""),e[1]]}},{name:"float$ebnf$1",symbols:[{literal:"M"}],postprocess:r},{name:"float$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"float",symbols:["int","frac","float$ebnf$1"],postprocess:function(e){return[e.slice(0,2).join(""),e[2]]}},{name:"float$ebnf$2",symbols:[{literal:"M"}],postprocess:r},{name:"float$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"float",symbols:["int","exp","float$ebnf$2"],postprocess:function(e){return[e.slice(0,2).join(""),e[2]]}},{name:"float$ebnf$3",symbols:[{literal:"M"}],postprocess:r},{name:"float$ebnf$3",symbols:[],postprocess:function(){return null}},{name:"float",symbols:["int","frac","exp","float$ebnf$3"],postprocess:function(e){return[e.slice(0,3).join(""),e[2]]}},{name:"frac$ebnf$1",symbols:[]},{name:"frac$ebnf$1",symbols:["frac$ebnf$1","digit"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"frac",symbols:[{literal:"."},"frac$ebnf$1"],postprocess:function(e){return e[0]+e[1].join("")}},{name:"exp",symbols:["ex","digits"],postprocess:function(e){return e.join("")}},{name:"ex$subexpression$1",symbols:[{literal:"e"}]},{name:"ex$subexpression$1",symbols:[{literal:"E"}]},{name:"ex$ebnf$1$subexpression$1",symbols:[{literal:"+"}]},{name:"ex$ebnf$1$subexpression$1",symbols:[{literal:"-"}]},{name:"ex$ebnf$1",symbols:["ex$ebnf$1$subexpression$1"],postprocess:r},{name:"ex$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"ex",symbols:["ex$subexpression$1","ex$ebnf$1"],postprocess:function(e){return"e"+(e[1]||"+")}},{name:"int",symbols:["int_no_prefix"]},{name:"int",symbols:[{literal:"+"},"int_no_prefix"],postprocess:function(e){return e.join("")}},{name:"int",symbols:[{literal:"-"},"int_no_prefix"],postprocess:function(e){return e.join("")}},{name:"int_no_prefix",symbols:[{literal:"0"}],postprocess:function(e){return e.join("")}},{name:"int_no_prefix$ebnf$1",symbols:[]},{name:"int_no_prefix$ebnf$1",symbols:["int_no_prefix$ebnf$1","digit"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"int_no_prefix",symbols:["oneToNine","int_no_prefix$ebnf$1"],postprocess:function(e){return e[0]+e[1].join("")}},{name:"oneToNine",symbols:[/[1-9]/],postprocess:function(e){return e.join("")}},{name:"MapElem",symbols:["mapKey","mapValue"],postprocess:function(e){return[[e[0][0],e[1][0]]].concat(e[1].slice(1))}},{name:"mapKey$subexpression$1",symbols:["mapKeySpace"]},{name:"mapKey$subexpression$1",symbols:["mapKeyNoSpace"]},{name:"mapKey",symbols:["mapKey$subexpression$1"],postprocess:function(e){return e[0]}},{name:"mapValue$subexpression$1",symbols:["mapValueSpace"]},{name:"mapValue$subexpression$1",symbols:["mapValueNoSpace"]},{name:"mapValue",symbols:["mapValue$subexpression$1"],postprocess:function(e){return e[0][0]}},{name:"mapKeySpace$ebnf$1",symbols:[]},{name:"mapKeySpace$ebnf$1$subexpression$1",symbols:["Discard","_"]},{name:"mapKeySpace$ebnf$1",symbols:["mapKeySpace$ebnf$1","mapKeySpace$ebnf$1$subexpression$1"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"mapKeySpace",symbols:["mapKeySpace$ebnf$1","mapElementSpace","_"],postprocess:function(e){return e[1]}},{name:"mapKeyNoSpace$ebnf$1",symbols:[]},{name:"mapKeyNoSpace$ebnf$1$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"mapKeyNoSpace$ebnf$1$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"mapKeyNoSpace$ebnf$1$subexpression$1",symbols:["Discard","mapKeyNoSpace$ebnf$1$subexpression$1$ebnf$1"]},{name:"mapKeyNoSpace$ebnf$1",symbols:["mapKeyNoSpace$ebnf$1","mapKeyNoSpace$ebnf$1$subexpression$1"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"mapKeyNoSpace$ebnf$2",symbols:["_"],postprocess:r},{name:"mapKeyNoSpace$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"mapKeyNoSpace",symbols:["mapKeyNoSpace$ebnf$1","mapElementNoSpace","mapKeyNoSpace$ebnf$2"],postprocess:function(e){return e[1]}},{name:"mapValueSpace$ebnf$1",symbols:[]},{name:"mapValueSpace$ebnf$1$subexpression$1",symbols:["Discard","_"]},{name:"mapValueSpace$ebnf$1",symbols:["mapValueSpace$ebnf$1","mapValueSpace$ebnf$1$subexpression$1"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"mapValueSpace$ebnf$2$subexpression$1",symbols:["_","MapElem"]},{name:"mapValueSpace$ebnf$2",symbols:["mapValueSpace$ebnf$2$subexpression$1"],postprocess:r},{name:"mapValueSpace$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"mapValueSpace",symbols:["mapValueSpace$ebnf$1","mapElementSpace","mapValueSpace$ebnf$2"],postprocess:function(e){return[e[1]].concat(e[2]?e[2][1]:[])}},{name:"mapValueNoSpace$ebnf$1",symbols:[]},{name:"mapValueNoSpace$ebnf$1$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"mapValueNoSpace$ebnf$1$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"mapValueNoSpace$ebnf$1$subexpression$1",symbols:["Discard","mapValueNoSpace$ebnf$1$subexpression$1$ebnf$1"]},{name:"mapValueNoSpace$ebnf$1",symbols:["mapValueNoSpace$ebnf$1","mapValueNoSpace$ebnf$1$subexpression$1"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"mapValueNoSpace$ebnf$2$subexpression$1$ebnf$1",symbols:["_"],postprocess:r},{name:"mapValueNoSpace$ebnf$2$subexpression$1$ebnf$1",symbols:[],postprocess:function(){return null}},{name:"mapValueNoSpace$ebnf$2$subexpression$1",symbols:["mapValueNoSpace$ebnf$2$subexpression$1$ebnf$1","MapElem"]},{name:"mapValueNoSpace$ebnf$2",symbols:["mapValueNoSpace$ebnf$2$subexpression$1"],postprocess:r},{name:"mapValueNoSpace$ebnf$2",symbols:[],postprocess:function(){return null}},{name:"mapValueNoSpace",symbols:["mapValueNoSpace$ebnf$1","mapElementNoSpace","mapValueNoSpace$ebnf$2"],postprocess:function(e){return[e[1]].concat(e[2]?e[2][1]:[])}},{name:"mapElementNoSpace$subexpression$1",symbols:["Vector"]},{name:"mapElementNoSpace$subexpression$1",symbols:["List"]},{name:"mapElementNoSpace$subexpression$1",symbols:["String"]},{name:"mapElementNoSpace$subexpression$1",symbols:["Map"]},{name:"mapElementNoSpace$subexpression$1",symbols:["Set"]},{name:"mapElementNoSpace",symbols:["mapElementNoSpace$subexpression$1"],postprocess:function(e){return e[0][0]}},{name:"mapElementSpace$subexpression$1",symbols:["Number"]},{name:"mapElementSpace$subexpression$1",symbols:["Character"]},{name:"mapElementSpace$subexpression$1",symbols:["Reserved"]},{name:"mapElementSpace$subexpression$1",symbols:["Symbol"]},{name:"mapElementSpace$subexpression$1",symbols:["Keyword"]},{name:"mapElementSpace$subexpression$1",symbols:["Tag"]},{name:"mapElementSpace",symbols:["mapElementSpace$subexpression$1"],postprocess:function(e){return[].concat.apply([],[e[0][0]])[0]}},{name:"hexDigit",symbols:[/[a-fA-F0-9]/],postprocess:function(e){return e[0]}},{name:"unicode",symbols:[{literal:"u"},"hexDigit","hexDigit","hexDigit","hexDigit"],postprocess:function(e){return String.fromCharCode(parseInt(e.slice(1).join(""),16))}},{name:"_",symbols:["space"],postprocess:function(e){return e[0]}},{name:"space$ebnf$1",symbols:[/[\s,\n]/]},{name:"space$ebnf$1",symbols:["space$ebnf$1",/[\s,\n]/],postprocess:function(e){return e[0].concat([e[1]])}},{name:"space",symbols:["space$ebnf$1"],postprocess:function(e){return e[0].join("")}},{name:"digits$ebnf$1",symbols:["digit"]},{name:"digits$ebnf$1",symbols:["digits$ebnf$1","digit"],postprocess:function(e){return e[0].concat([e[1]])}},{name:"digits",symbols:["digits$ebnf$1"],postprocess:function(e){return e[0].join("")}},{name:"digit",symbols:[/[0-9]/],postprocess:function(e){return e[0]}},{name:"letter",symbols:[/[a-zA-Z]/],postprocess:function(e){return e[0]}}],ParserStart:"Main"},o=n(27),i=n(28);t.parse=function(e){var t=new o.Parser(o.Grammar.fromCompiled(s));if(!i.preprocess(e))return null;try{return t.feed(i.preprocess(e)).results[0]}catch(e){return!1}}},function(e,t,n){var r,s;r=this,s=function(){function e(t,n,r){return this.id=++e.highestId,this.name=t,this.symbols=n,this.postprocess=r,this}function t(e,t,n,r){this.rule=e,this.dot=t,this.reference=n,this.data=[],this.wantedBy=r,this.isComplete=this.dot===e.symbols.length}function n(e,t){this.grammar=e,this.index=t,this.states=[],this.wants={},this.scannable=[],this.completed={}}function r(e,t){this.rules=e,this.start=t||this.rules[0].name;var n=this.byName={};this.rules.forEach(function(e){n.hasOwnProperty(e.name)||(n[e.name]=[]),n[e.name].push(e)})}function s(){this.reset("")}function o(e,t,o){if(e instanceof r){var i=e;o=t}else i=r.fromCompiled(e,t);for(var a in this.grammar=i,this.options={keepHistory:!1,lexer:i.lexer||new s},o||{})this.options[a]=o[a];this.lexer=this.options.lexer,this.lexerState=void 0;var u=new n(i,0);this.table=[u];u.wants[i.start]=[],u.predict(i.start),u.process(),this.current=0}return e.highestId=0,e.prototype.toString=function(e){function t(e){return e.literal?JSON.stringify(e.literal):e.type?"%"+e.type:e.toString()}var n=void 0===e?this.symbols.map(t).join(" "):this.symbols.slice(0,e).map(t).join(" ")+" ● "+this.symbols.slice(e).map(t).join(" ");return this.name+" → "+n},t.prototype.toString=function(){return"{"+this.rule.toString(this.dot)+"}, from: "+(this.reference||0)},t.prototype.nextState=function(e){var n=new t(this.rule,this.dot+1,this.reference,this.wantedBy);return n.left=this,n.right=e,n.isComplete&&(n.data=n.build()),n},t.prototype.build=function(){var e=[],t=this;do{e.push(t.right.data),t=t.left}while(t.left);return e.reverse(),e},t.prototype.finish=function(){this.rule.postprocess&&(this.data=this.rule.postprocess(this.data,this.reference,o.fail))},n.prototype.process=function(e){for(var t=this.states,n=this.wants,r=this.completed,s=0;s<t.length;s++){var i=t[s];if(i.isComplete){if(i.finish(),i.data!==o.fail){for(var a=i.wantedBy,u=a.length;u--;){var c=a[u];this.complete(c,i)}if(i.reference===this.index){var l=i.rule.name;(this.completed[l]=this.completed[l]||[]).push(i)}}}else{if("string"!=typeof(l=i.rule.symbols[i.dot])){this.scannable.push(i);continue}if(n[l]){if(n[l].push(i),r.hasOwnProperty(l)){var f=r[l];for(u=0;u<f.length;u++){var p=f[u];this.complete(i,p)}}}else n[l]=[i],this.predict(l)}}},n.prototype.predict=function(e){for(var n=this.grammar.byName[e]||[],r=0;r<n.length;r++){var s=n[r],o=this.wants[e],i=new t(s,0,this.index,o);this.states.push(i)}},n.prototype.complete=function(e,t){var n=e.nextState(t);this.states.push(n)},r.fromCompiled=function(t,n){var s=t.Lexer;t.ParserStart&&(n=t.ParserStart,t=t.ParserRules);var o=new r(t=t.map(function(t){return new e(t.name,t.symbols,t.postprocess)}),n);return o.lexer=s,o},s.prototype.reset=function(e,t){this.buffer=e,this.index=0,this.line=t?t.line:1,this.lastLineBreak=t?-t.col:0},s.prototype.next=function(){if(this.index<this.buffer.length){var e=this.buffer[this.index++];return"\n"===e&&(this.line+=1,this.lastLineBreak=this.index),{value:e}}},s.prototype.save=function(){return{line:this.line,col:this.index-this.lastLineBreak}},s.prototype.formatError=function(e,t){var n=this.buffer;if("string"==typeof n){var r=n.indexOf("\n",this.index);-1===r&&(r=n.length);var s=n.substring(this.lastLineBreak,r),o=this.index-this.lastLineBreak;return t+=" at line "+this.line+" col "+o+":\n\n",t+="  "+s+"\n",t+="  "+Array(o).join(" ")+"^"}return t+" at index "+(this.index-1)},o.fail={},o.prototype.feed=function(e){var t,r=this.lexer;for(r.reset(e,this.lexerState);t=r.next();){var o=this.table[this.current];this.options.keepHistory||delete this.table[this.current-1];var i=this.current+1,a=new n(this.grammar,i);this.table.push(a);for(var u=void 0!==t.text?t.text:t.value,c=r.constructor===s?t.value:t,l=o.scannable,f=l.length;f--;){var p=l[f],m=p.rule.symbols[p.dot];if(m.test?m.test(c):m.type?m.type===t.type:m.literal===u){var b=p.nextState({data:c,token:t,isToken:!0,reference:i-1});a.states.push(b)}}if(a.process(),0===a.states.length){var y=this.lexer.formatError(t,"invalid syntax")+"\n";y+="Unexpected "+(t.type?t.type+" token: ":""),y+=JSON.stringify(void 0!==t.value?t.value:t)+"\n";var h=new Error(y);throw h.offset=this.current,h.token=t,h}this.options.keepHistory&&(o.lexerState=r.save()),this.current++}return o&&(this.lexerState=r.save()),this.results=this.finish(),this},o.prototype.save=function(){var e=this.table[this.current];return e.lexerState=this.lexerState,e},o.prototype.restore=function(e){var t=e.index;this.current=t,this.table[t]=e,this.table.splice(t+1),this.lexerState=e.lexerState,this.results=this.finish()},o.prototype.rewind=function(e){if(!this.options.keepHistory)throw new Error("set option `keepHistory` to enable rewinding");this.restore(this.table[e])},o.prototype.finish=function(){var e=[],t=this.grammar.start;return this.table[this.table.length-1].states.forEach(function(n){n.rule.name===t&&n.dot===n.rule.symbols.length&&0===n.reference&&n.data!==o.fail&&e.push(n)}),e.map(function(e){return e.data})},{Parser:o,Grammar:r,Rule:e}},e.exports?e.exports=s():r.nearley=s()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.preprocess=function(e){return function(e){for(var t="",n=!1,r=!1,s=!1,o=0,i=e;o<i.length;o++){var a=i[o];s?(t+=a,s=!1):";"!==a||n?"\n"===a?(t+="\n",r=!1):r||(t+=a,"\\"===a?s=!0:'"'===a&&(n=!n)):r=!0}return t}(e).trim()}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5),s=n(4),o=n(3),i=n(23);function a(e){if(!o.isArray(e))throw"Invalid EDN string";return e.filter(function(e){return e&&"discard"!==e.type}).map(u)}function u(e){var t=e.data,n=e.type,o=e.tag;switch(n){case"double":return parseFloat(t);case"int":return parseInt(t);case"string":return i.unescapeStr(t);case"char":return t;case"keyword":return r.keyword(t);case"symbol":return r.symbol(t);case"boolean":case"bool":return"true"===t||!0===t;case"tag":return function(e,t){return r.tag(e,u(t))}(o,t);case"list":case"vector":return a(t);case"set":return r.set(a(t));case"map":return r.map(s.flatMap(a,t))}return null}t.processTokens=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isInfinite=e=>e===1/0||e===-1/0},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(8),s=n(7);t.isIterable=e=>r.isObject(e)&&s.isFunction(e[Symbol.iterator])},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(9),s=n(10);t.isNil=e=>r.isNull(e)||s.isUndefined(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isString=e=>"string"==typeof e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isInteger=e=>(0|e)===e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(11);t.isFloat=r.isNumber},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isArray=Array.isArray},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0}),t.isBuffer=t=>!!e&&e.isBuffer(t)}).call(this,n(38).Buffer)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var r=n(40),s=n(41),o=n(42);function i(){return u.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(i()<t)throw new RangeError("Invalid typed array length");return u.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=u.prototype:(null===e&&(e=new u(t)),e.length=t),e}function u(e,t,n){if(!(u.TYPED_ARRAY_SUPPORT||this instanceof u))return new u(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return f(this,e)}return c(this,e,t,n)}function c(e,t,n,r){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,r){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,n):new Uint8Array(t,n,r);u.TYPED_ARRAY_SUPPORT?(e=t).__proto__=u.prototype:e=p(e,t);return e}(e,t,n,r):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!u.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|b(t,n),s=(e=a(e,r)).write(t,n);s!==r&&(e=e.slice(0,s));return e}(e,t,n):function(e,t){if(u.isBuffer(t)){var n=0|m(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(r=t.length)!=r?a(e,0):p(e,t);if("Buffer"===t.type&&o(t.data))return p(e,t.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function l(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function f(e,t){if(l(t),e=a(e,t<0?0:0|m(t)),!u.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function p(e,t){var n=t.length<0?0:0|m(t.length);e=a(e,n);for(var r=0;r<n;r+=1)e[r]=255&t[r];return e}function m(e){if(e>=i())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+i().toString(16)+" bytes");return 0|e}function b(e,t){if(u.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var r=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return C(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return D(e).length;default:if(r)return C(e).length;t=(""+t).toLowerCase(),r=!0}}function y(e,t,n){var r=e[t];e[t]=e[n],e[n]=r}function h(e,t,n,r,s){if(0===e.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=s?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(s)return-1;n=e.length-1}else if(n<0){if(!s)return-1;n=0}if("string"==typeof t&&(t=u.from(t,r)),u.isBuffer(t))return 0===t.length?-1:$(e,t,n,r,s);if("number"==typeof t)return t&=255,u.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?s?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):$(e,[t],n,r,s);throw new TypeError("val must be string, number or Buffer")}function $(e,t,n,r,s){var o,i=1,a=e.length,u=t.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(e.length<2||t.length<2)return-1;i=2,a/=2,u/=2,n/=2}function c(e,t){return 1===i?e[t]:e.readUInt16BE(t*i)}if(s){var l=-1;for(o=n;o<a;o++)if(c(e,o)===c(t,-1===l?0:o-l)){if(-1===l&&(l=o),o-l+1===u)return l*i}else-1!==l&&(o-=o-l),l=-1}else for(n+u>a&&(n=a-u),o=n;o>=0;o--){for(var f=!0,p=0;p<u;p++)if(c(e,o+p)!==c(t,p)){f=!1;break}if(f)return o}return-1}function d(e,t,n,r){n=Number(n)||0;var s=e.length-n;r?(r=Number(r))>s&&(r=s):r=s;var o=t.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var i=0;i<r;++i){var a=parseInt(t.substr(2*i,2),16);if(isNaN(a))return i;e[n+i]=a}return i}function _(e,t,n,r){return Y(C(t,e.length-n),e,n,r)}function g(e,t,n,r){return Y(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,r)}function v(e,t,n,r){return g(e,t,n,r)}function x(e,t,n,r){return Y(D(t),e,n,r)}function S(e,t,n,r){return Y(function(e,t){for(var n,r,s,o=[],i=0;i<e.length&&!((t-=2)<0);++i)n=e.charCodeAt(i),r=n>>8,s=n%256,o.push(s),o.push(r);return o}(t,e.length-n),e,n,r)}function E(e,t,n){return 0===t&&n===e.length?r.fromByteArray(e):r.fromByteArray(e.slice(t,n))}function w(e,t,n){n=Math.min(e.length,n);for(var r=[],s=t;s<n;){var o,i,a,u,c=e[s],l=null,f=c>239?4:c>223?3:c>191?2:1;if(s+f<=n)switch(f){case 1:c<128&&(l=c);break;case 2:128==(192&(o=e[s+1]))&&(u=(31&c)<<6|63&o)>127&&(l=u);break;case 3:o=e[s+1],i=e[s+2],128==(192&o)&&128==(192&i)&&(u=(15&c)<<12|(63&o)<<6|63&i)>2047&&(u<55296||u>57343)&&(l=u);break;case 4:o=e[s+1],i=e[s+2],a=e[s+3],128==(192&o)&&128==(192&i)&&128==(192&a)&&(u=(15&c)<<18|(63&o)<<12|(63&i)<<6|63&a)>65535&&u<1114112&&(l=u)}null===l?(l=65533,f=1):l>65535&&(l-=65536,r.push(l>>>10&1023|55296),l=56320|1023&l),r.push(l),s+=f}return function(e){var t=e.length;if(t<=O)return String.fromCharCode.apply(String,e);var n="",r=0;for(;r<t;)n+=String.fromCharCode.apply(String,e.slice(r,r+=O));return n}(r)}t.Buffer=u,t.SlowBuffer=function(e){+e!=e&&(e=0);return u.alloc(+e)},t.INSPECT_MAX_BYTES=50,u.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=i(),u.poolSize=8192,u._augment=function(e){return e.__proto__=u.prototype,e},u.from=function(e,t,n){return c(null,e,t,n)},u.TYPED_ARRAY_SUPPORT&&(u.prototype.__proto__=Uint8Array.prototype,u.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&u[Symbol.species]===u&&Object.defineProperty(u,Symbol.species,{value:null,configurable:!0})),u.alloc=function(e,t,n){return function(e,t,n,r){return l(t),t<=0?a(e,t):void 0!==n?"string"==typeof r?a(e,t).fill(n,r):a(e,t).fill(n):a(e,t)}(null,e,t,n)},u.allocUnsafe=function(e){return f(null,e)},u.allocUnsafeSlow=function(e){return f(null,e)},u.isBuffer=function(e){return!(null==e||!e._isBuffer)},u.compare=function(e,t){if(!u.isBuffer(e)||!u.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,r=t.length,s=0,o=Math.min(n,r);s<o;++s)if(e[s]!==t[s]){n=e[s],r=t[s];break}return n<r?-1:r<n?1:0},u.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},u.concat=function(e,t){if(!o(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return u.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var r=u.allocUnsafe(t),s=0;for(n=0;n<e.length;++n){var i=e[n];if(!u.isBuffer(i))throw new TypeError('"list" argument must be an Array of Buffers');i.copy(r,s),s+=i.length}return r},u.byteLength=b,u.prototype._isBuffer=!0,u.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)y(this,t,t+1);return this},u.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)y(this,t,t+3),y(this,t+1,t+2);return this},u.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)y(this,t,t+7),y(this,t+1,t+6),y(this,t+2,t+5),y(this,t+3,t+4);return this},u.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?w(this,0,e):function(e,t,n){var r=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return j(this,t,n);case"utf8":case"utf-8":return w(this,t,n);case"ascii":return P(this,t,n);case"latin1":case"binary":return M(this,t,n);case"base64":return E(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,n);default:if(r)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),r=!0}}.apply(this,arguments)},u.prototype.equals=function(e){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===u.compare(this,e)},u.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},u.prototype.compare=function(e,t,n,r,s){if(!u.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===r&&(r=0),void 0===s&&(s=this.length),t<0||n>e.length||r<0||s>this.length)throw new RangeError("out of range index");if(r>=s&&t>=n)return 0;if(r>=s)return-1;if(t>=n)return 1;if(this===e)return 0;for(var o=(s>>>=0)-(r>>>=0),i=(n>>>=0)-(t>>>=0),a=Math.min(o,i),c=this.slice(r,s),l=e.slice(t,n),f=0;f<a;++f)if(c[f]!==l[f]){o=c[f],i=l[f];break}return o<i?-1:i<o?1:0},u.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},u.prototype.indexOf=function(e,t,n){return h(this,e,t,n,!0)},u.prototype.lastIndexOf=function(e,t,n){return h(this,e,t,n,!1)},u.prototype.write=function(e,t,n,r){if(void 0===t)r="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)r=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var s=this.length-t;if((void 0===n||n>s)&&(n=s),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return d(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return g(this,e,t,n);case"latin1":case"binary":return v(this,e,t,n);case"base64":return x(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return S(this,e,t,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},u.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var O=4096;function P(e,t,n){var r="";n=Math.min(e.length,n);for(var s=t;s<n;++s)r+=String.fromCharCode(127&e[s]);return r}function M(e,t,n){var r="";n=Math.min(e.length,n);for(var s=t;s<n;++s)r+=String.fromCharCode(e[s]);return r}function j(e,t,n){var r=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>r)&&(n=r);for(var s="",o=t;o<n;++o)s+=L(e[o]);return s}function A(e,t,n){for(var r=e.slice(t,n),s="",o=0;o<r.length;o+=2)s+=String.fromCharCode(r[o]+256*r[o+1]);return s}function N(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function R(e,t,n,r,s,o){if(!u.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>s||t<o)throw new RangeError('"value" argument is out of bounds');if(n+r>e.length)throw new RangeError("Index out of range")}function T(e,t,n,r){t<0&&(t=65535+t+1);for(var s=0,o=Math.min(e.length-n,2);s<o;++s)e[n+s]=(t&255<<8*(r?s:1-s))>>>8*(r?s:1-s)}function k(e,t,n,r){t<0&&(t=4294967295+t+1);for(var s=0,o=Math.min(e.length-n,4);s<o;++s)e[n+s]=t>>>8*(r?s:3-s)&255}function I(e,t,n,r,s,o){if(n+r>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function B(e,t,n,r,o){return o||I(e,0,n,4),s.write(e,t,n,r,23,4),n+4}function U(e,t,n,r,o){return o||I(e,0,n,8),s.write(e,t,n,r,52,8),n+8}u.prototype.slice=function(e,t){var n,r=this.length;if((e=~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),(t=void 0===t?r:~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),t<e&&(t=e),u.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=u.prototype;else{var s=t-e;n=new u(s,void 0);for(var o=0;o<s;++o)n[o]=this[o+e]}return n},u.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e],s=1,o=0;++o<t&&(s*=256);)r+=this[e+o]*s;return r},u.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e+--t],s=1;t>0&&(s*=256);)r+=this[e+--t]*s;return r},u.prototype.readUInt8=function(e,t){return t||N(e,1,this.length),this[e]},u.prototype.readUInt16LE=function(e,t){return t||N(e,2,this.length),this[e]|this[e+1]<<8},u.prototype.readUInt16BE=function(e,t){return t||N(e,2,this.length),this[e]<<8|this[e+1]},u.prototype.readUInt32LE=function(e,t){return t||N(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},u.prototype.readUInt32BE=function(e,t){return t||N(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},u.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=this[e],s=1,o=0;++o<t&&(s*=256);)r+=this[e+o]*s;return r>=(s*=128)&&(r-=Math.pow(2,8*t)),r},u.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||N(e,t,this.length);for(var r=t,s=1,o=this[e+--r];r>0&&(s*=256);)o+=this[e+--r]*s;return o>=(s*=128)&&(o-=Math.pow(2,8*t)),o},u.prototype.readInt8=function(e,t){return t||N(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},u.prototype.readInt16LE=function(e,t){t||N(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt16BE=function(e,t){t||N(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},u.prototype.readInt32LE=function(e,t){return t||N(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},u.prototype.readInt32BE=function(e,t){return t||N(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},u.prototype.readFloatLE=function(e,t){return t||N(e,4,this.length),s.read(this,e,!0,23,4)},u.prototype.readFloatBE=function(e,t){return t||N(e,4,this.length),s.read(this,e,!1,23,4)},u.prototype.readDoubleLE=function(e,t){return t||N(e,8,this.length),s.read(this,e,!0,52,8)},u.prototype.readDoubleBE=function(e,t){return t||N(e,8,this.length),s.read(this,e,!1,52,8)},u.prototype.writeUIntLE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||R(this,e,t,n,Math.pow(2,8*n)-1,0);var s=1,o=0;for(this[t]=255&e;++o<n&&(s*=256);)this[t+o]=e/s&255;return t+n},u.prototype.writeUIntBE=function(e,t,n,r){(e=+e,t|=0,n|=0,r)||R(this,e,t,n,Math.pow(2,8*n)-1,0);var s=n-1,o=1;for(this[t+s]=255&e;--s>=0&&(o*=256);)this[t+s]=e/o&255;return t+n},u.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,255,0),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},u.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):T(this,e,t,!0),t+2},u.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,65535,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):T(this,e,t,!1),t+2},u.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):k(this,e,t,!0),t+4},u.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,4294967295,0),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},u.prototype.writeIntLE=function(e,t,n,r){if(e=+e,t|=0,!r){var s=Math.pow(2,8*n-1);R(this,e,t,n,s-1,-s)}var o=0,i=1,a=0;for(this[t]=255&e;++o<n&&(i*=256);)e<0&&0===a&&0!==this[t+o-1]&&(a=1),this[t+o]=(e/i>>0)-a&255;return t+n},u.prototype.writeIntBE=function(e,t,n,r){if(e=+e,t|=0,!r){var s=Math.pow(2,8*n-1);R(this,e,t,n,s-1,-s)}var o=n-1,i=1,a=0;for(this[t+o]=255&e;--o>=0&&(i*=256);)e<0&&0===a&&0!==this[t+o+1]&&(a=1),this[t+o]=(e/i>>0)-a&255;return t+n},u.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,1,127,-128),u.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},u.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):T(this,e,t,!0),t+2},u.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,2,32767,-32768),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):T(this,e,t,!1),t+2},u.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),u.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):k(this,e,t,!0),t+4},u.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||R(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),u.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},u.prototype.writeFloatLE=function(e,t,n){return B(this,e,t,!0,n)},u.prototype.writeFloatBE=function(e,t,n){return B(this,e,t,!1,n)},u.prototype.writeDoubleLE=function(e,t,n){return U(this,e,t,!0,n)},u.prototype.writeDoubleBE=function(e,t,n){return U(this,e,t,!1,n)},u.prototype.copy=function(e,t,n,r){if(n||(n=0),r||0===r||(r=this.length),t>=e.length&&(t=e.length),t||(t=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),e.length-t<r-n&&(r=e.length-t+n);var s,o=r-n;if(this===e&&n<t&&t<r)for(s=o-1;s>=0;--s)e[s+t]=this[s+n];else if(o<1e3||!u.TYPED_ARRAY_SUPPORT)for(s=0;s<o;++s)e[s+t]=this[s+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+o),t);return o},u.prototype.fill=function(e,t,n,r){if("string"==typeof e){if("string"==typeof t?(r=t,t=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===e.length){var s=e.charCodeAt(0);s<256&&(e=s)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!u.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var o;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(o=t;o<n;++o)this[o]=e;else{var i=u.isBuffer(e)?e:C(new u(e,r).toString()),a=i.length;for(o=0;o<n-t;++o)this[o+t]=i[o%a]}return this};var V=/[^+\/0-9A-Za-z-_]/g;function L(e){return e<16?"0"+e.toString(16):e.toString(16)}function C(e,t){var n;t=t||1/0;for(var r=e.length,s=null,o=[],i=0;i<r;++i){if((n=e.charCodeAt(i))>55295&&n<57344){if(!s){if(n>56319){(t-=3)>-1&&o.push(239,191,189);continue}if(i+1===r){(t-=3)>-1&&o.push(239,191,189);continue}s=n;continue}if(n<56320){(t-=3)>-1&&o.push(239,191,189),s=n;continue}n=65536+(s-55296<<10|n-56320)}else s&&(t-=3)>-1&&o.push(239,191,189);if(s=null,n<128){if((t-=1)<0)break;o.push(n)}else if(n<2048){if((t-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function D(e){return r.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(V,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function Y(e,t,n,r){for(var s=0;s<r&&!(s+n>=t.length||s>=e.length);++s)t[s+n]=e[s];return s}}).call(this,n(39))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],r=t[1];return 3*(n+r)/4-r},t.toByteArray=function(e){for(var t,n=c(e),r=n[0],i=n[1],a=new o(function(e,t,n){return 3*(t+n)/4-n}(0,r,i)),u=0,l=i>0?r-4:r,f=0;f<l;f+=4)t=s[e.charCodeAt(f)]<<18|s[e.charCodeAt(f+1)]<<12|s[e.charCodeAt(f+2)]<<6|s[e.charCodeAt(f+3)],a[u++]=t>>16&255,a[u++]=t>>8&255,a[u++]=255&t;2===i&&(t=s[e.charCodeAt(f)]<<2|s[e.charCodeAt(f+1)]>>4,a[u++]=255&t);1===i&&(t=s[e.charCodeAt(f)]<<10|s[e.charCodeAt(f+1)]<<4|s[e.charCodeAt(f+2)]>>2,a[u++]=t>>8&255,a[u++]=255&t);return a},t.fromByteArray=function(e){for(var t,n=e.length,s=n%3,o=[],i=0,a=n-s;i<a;i+=16383)o.push(l(e,i,i+16383>a?a:i+16383));1===s?(t=e[n-1],o.push(r[t>>2]+r[t<<4&63]+"==")):2===s&&(t=(e[n-2]<<8)+e[n-1],o.push(r[t>>10]+r[t>>4&63]+r[t<<2&63]+"="));return o.join("")};for(var r=[],s=[],o="undefined"!=typeof Uint8Array?Uint8Array:Array,i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,u=i.length;a<u;++a)r[a]=i[a],s[i.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function l(e,t,n){for(var s,o,i=[],a=t;a<n;a+=3)s=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),i.push(r[(o=s)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return i.join("")}s["-".charCodeAt(0)]=62,s["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,r,s){var o,i,a=8*s-r-1,u=(1<<a)-1,c=u>>1,l=-7,f=n?s-1:0,p=n?-1:1,m=e[t+f];for(f+=p,o=m&(1<<-l)-1,m>>=-l,l+=a;l>0;o=256*o+e[t+f],f+=p,l-=8);for(i=o&(1<<-l)-1,o>>=-l,l+=r;l>0;i=256*i+e[t+f],f+=p,l-=8);if(0===o)o=1-c;else{if(o===u)return i?NaN:1/0*(m?-1:1);i+=Math.pow(2,r),o-=c}return(m?-1:1)*i*Math.pow(2,o-r)},t.write=function(e,t,n,r,s,o){var i,a,u,c=8*o-s-1,l=(1<<c)-1,f=l>>1,p=23===s?Math.pow(2,-24)-Math.pow(2,-77):0,m=r?0:o-1,b=r?1:-1,y=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,i=l):(i=Math.floor(Math.log(t)/Math.LN2),t*(u=Math.pow(2,-i))<1&&(i--,u*=2),(t+=i+f>=1?p/u:p*Math.pow(2,1-f))*u>=2&&(i++,u/=2),i+f>=l?(a=0,i=l):i+f>=1?(a=(t*u-1)*Math.pow(2,s),i+=f):(a=t*Math.pow(2,f-1)*Math.pow(2,s),i=0));s>=8;e[n+m]=255&a,m+=b,a/=256,s-=8);for(i=i<<s|a,c+=s;c>0;e[n+m]=255&i,m+=b,i/=256,c-=8);e[n+m-b]|=128*y}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isSet=e=>!!Set&&e instanceof Set},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.isMap=e=>!!Map&&e instanceof Map},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.filter=r.curry((e,t)=>s.toArrayOrEmpty(t).filter(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3);function s(...e){return t=>{let n=t;for(const t of e)n=t(n);return n}}t.pipe=(e,...t)=>r.isFunction(e)?s(e,...t):s(...t)(e)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.and=(...e)=>t=>[...e].reduce((e,n)=>e&&n(t),!0)&&!!e.length,t.or=(...e)=>t=>[...e].reduce((e,n)=>e||n(t),!1),t.xor=(...e)=>t=>1===[...e].map(e=>+e(t)).reduce((e,t)=>e+t,0),t.negate=e=>t=>!e(t),t.toPredicate=e=>t=>!!e(t),t.boolToPredicate=e=>()=>e},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(13);t.reverseCurry=e=>{const t=n=>(...s)=>{const o=n.concat(s);return o.length<e.length?t(o):r.reverseArgs(e)(...o)};return t([])}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(12);t.spread=r.curry((e,t)=>e(...t))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1),o=n(14),i=n(15);t.flatMap=r.curry((e,t)=>r.pipe(s.toArrayOrEmpty(t),o.map(e),i.flatten))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.limit=r.curry((e,t)=>s.toArrayOrEmpty(t).splice(0,e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.scan=r.curry((e,t,n)=>{let r=t;return s.toArrayOrEmpty(n).map(t=>r=e(r,t))})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.skip=r.curry((e,t)=>s.toArrayOrEmpty(t).splice(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.tap=r.curry((e,t)=>(s.toArrayOrEmpty(t).forEach(e),t))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0);t.zip=r.curry((e,t,...n)=>{const r=[e,t,...n],s=Math.max(...r.map(e=>e.length)),o=[];for(let e=0;e<s;++e)o.push(r.map(t=>e<t.length?t[e]:null));return o})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.takeWhile=r.curry((e,t)=>{const n=s.toArrayOrEmpty(t),r=[];for(const t of n){if(!e(t))return r;r.push(t)}return r})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.reduce=r.curry((e,t,n)=>s.toArrayOrEmpty(n).reduce(e,t))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(1);t.chunk=r.curry((e,t)=>{const n=s.toArrayOrEmpty(t),r=[];let o=[];for(const t of n)o.length>=e&&(r.push(o),o=[]),o.push(t);return o.length&&r.push(o),r})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);t.fromPairs=e=>r.toArrayOrEmpty(e).map(([e,t])=>({[e]:t})).reduce((e,t)=>Object.assign(e,t),{})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(16);t.first=r.firstOrNull},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1),s=n(0);t.join=s.curry((e,t)=>r.toArrayOrEmpty(t).join(e))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.filter=r.curry(function*(e,t){const n=s.toIterableOrEmpty(t);for(const t of n)e(t)&&(yield t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(3),o=n(2);t.flatMap=r.curry(function*(e,t){const n=o.toIterableOrEmpty(t);for(const t of n){const n=e(t);if(s.isIterable(n))for(const e of n)yield e;else yield n}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(3),o=n(2);t.flatten=r.curry(function*(e){const t=o.toIterableOrEmpty(e);for(const e of t)if(s.isIterable(e))for(const t of e)yield t;else yield e})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.map=r.curry(function*(e,t){const n=s.toIterableOrEmpty(t);for(const t of n)yield e(t)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.scan=r.curry(function*(e,t,n){const r=s.toIterableOrEmpty(n);let o=t;for(const t of r)o=e(o,t),yield o})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.skip=r.curry(function*(e=1,t){const n=s.toIterableOrEmpty(t)[Symbol.iterator]();let r=!1;for(let t=0;t<e&&!r;++t)r=n.next().done;if(!r)for(;;){const{done:e,value:t}=n.next();if(e)return;yield t}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.tap=r.curry(function*(e,t){const n=s.toIterableOrEmpty(t);for(const t of n)e(t),yield t})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.zip=r.curry(function*(e,t,...n){const r=[e,t].concat(n).map(s.toIterableOrEmpty).map(e=>e[Symbol.iterator]());for(;;){const e=r.map(e=>e.next()),t=e.map(({value:e,done:t})=>t?null:e);if(e.reduce((e,t)=>e&&t.done,!0))return;yield t}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(3);t.takeWhile=r.curry(function*(e,t){if(s.isIterable(e)){const n=e[Symbol.iterator]();for(const e of t){const t=n.next();if(!t.value||t.done)return;yield e}}else for(const n of t){if(!e(n))return;yield n}}),t.takeWhilePullPush=r.curry(function*(e,t){const n=e[Symbol.iterator]();for(const e of t){let t=n.next();if(t.done||!t.value)return;if((t=n.next(e)).done||!t.value)return;yield e}})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.chunk=r.curry(function*(e,t){const n=s.toIterableOrEmpty(t);let r=[];for(const t of n)r.length>=e&&(yield r,r=[]),r.push(t);r.length&&(yield r)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(20);t.head=r.first},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(22);t.firstOrNull=r.firstOr(null)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(2),s=n(0),o=n(18);t.join=s.curry(function*(e,t){yield o.collectToArray(r.toIterableOrEmpty(t)).join(e)})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(0),s=n(2);t.reduce=r.curry(function(e,t,n){const r=s.toIterableOrEmpty(n);let o=t;for(const t of r)o=e(o,t);return o})},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(0),s=n(6),o=n(4),i=n(5),a=n(77);t.stringify=function(e){switch(i.type(e)){case"Nil":return"nil";case"Number":return""+e;case"String":return JSON.stringify(e);case"Map":return function(e){return"{"+r.pipe(a.entries(e),s.flatten,s.map(t.stringify),s.collectToArray,o.join(" "))+"}"}(e);case"Set":return function(e){return"#{"+r.pipe(e.values(),s.map(t.stringify),s.collectToArray,o.join(" "))+"}"}(e);case"Tag":return function(e){return"#"+e.tag.symbol+" "+t.stringify(e.data)}(e);case"Symbol":return function(e){return e.symbol}(e);case"Keyword":return function(e){return":"+e.keyword}(e);case"Vector":return function(e){return"["+o.map(t.stringify,e).join(" ")+"]"}(e);default:return""+e}}},function(e,t,n){"use strict";function r(e){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}Object.defineProperty(t,"__esModule",{value:!0}),r(n(78)),r(n(24))},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(24);t.toPairs=r.entries},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4),s=n(3),o=n(23);function i(e){if(!s.isArray(e))throw"Invalid EDN string";return e.filter(function(e){return e&&"discard"!==e.type}).map(a)}function a(e){var t=e.data,n=e.type,s=e.tag;switch(n){case"double":return parseFloat(t);case"int":return parseInt(t);case"string":return o.unescapeStr(t);case"char":case"keyword":case"symbol":return t;case"boolean":case"bool":return"true"===t||!0===t;case"tag":return{tag:s,value:a(t)};case"list":case"vector":return i(t);case"set":return r.fromPairs(r.map(function(e){return[e,e]},i(t)));case"map":return r.fromPairs(r.chunk(2,r.flatMap(i,t)))}return null}t.processTokens=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,